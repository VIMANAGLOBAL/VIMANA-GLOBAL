/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.vimana.vimana.csr.gui;

import java.awt.event.WindowEvent;
import java.security.Security;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 * Main window of CSR GUI
 *
 * @author alukin@gmail.com
 */
public class MainWindow extends javax.swing.JFrame {

    int selectedIndex = 0;
    ChangeListener changeListener = new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent changeEvent) {
            javax.swing.JTabbedPane sourceTabbedPane = (javax.swing.JTabbedPane) changeEvent.getSource();
            selectedIndex = sourceTabbedPane.getSelectedIndex();
            updateButtons();
        }
    };

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        jTabbedPane.removeAll();
        jTabbedPane.addChangeListener(changeListener);
        newFile();
    }

    private void doExit() {
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    private int onExit() {
        int res = JOptionPane.OK_OPTION;
        System.out.println("Closing application");
        int cc = jTabbedPane.getComponentCount();
        for(int i=0; i<cc;i++){
           VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(i); 
           if (tp.askSave()==JOptionPane.CANCEL_OPTION){
               res = JOptionPane.CANCEL_OPTION;
           }
        }
        return res;
    }

    /**
     * update buttons on selection change
     */
    void updateButtons() {
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(selectedIndex);
        if (tp instanceof X509Panel) {
            jButtonSelfSign.setEnabled(false);
        } else {
            jButtonSelfSign.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jButtonTBNew = new javax.swing.JButton();
        jButtonTBOpen = new javax.swing.JButton();
        jButtonTBSave = new javax.swing.JButton();
        jButtonSelfSign = new javax.swing.JButton();
        jButtonViewPEM = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelDummy = new javax.swing.JPanel();
        jPanelStatus = new javax.swing.JPanel();
        jLabelStatus1 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuFileNew = new javax.swing.JMenuItem();
        jMenuFileOpen = new javax.swing.JMenuItem();
        jMenuFileSave = new javax.swing.JMenuItem();
        jMenuFileSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExportPEM = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuFileExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemEditCopy = new javax.swing.JMenuItem();
        jMenuIEditPaste = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jMenuItemViewText = new javax.swing.JMenuItem();
        jMenuItemViewPEM = new javax.swing.JMenuItem();
        jMenuOptions = new javax.swing.JMenu();
        jRadioButtonMenuItemLoadPvtKey = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar.setRollover(true);

        jButtonTBNew.setText("New");
        jButtonTBNew.setFocusable(false);
        jButtonTBNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonTBNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonTBNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTBNewActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonTBNew);

        jButtonTBOpen.setText("Open");
        jButtonTBOpen.setFocusable(false);
        jButtonTBOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonTBOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonTBOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTBOpenActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonTBOpen);

        jButtonTBSave.setText("Save");
        jButtonTBSave.setFocusable(false);
        jButtonTBSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonTBSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonTBSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTBSaveActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonTBSave);

        jButtonSelfSign.setText("Self-Sign");
        jButtonSelfSign.setFocusable(false);
        jButtonSelfSign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSelfSign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSelfSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelfSignActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonSelfSign);

        jButtonViewPEM.setText("View PEM");
        jButtonViewPEM.setFocusable(false);
        jButtonViewPEM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonViewPEM.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonViewPEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewPEMActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonViewPEM);

        getContentPane().add(jToolBar, java.awt.BorderLayout.NORTH);

        javax.swing.GroupLayout jPanelDummyLayout = new javax.swing.GroupLayout(jPanelDummy);
        jPanelDummy.setLayout(jPanelDummyLayout);
        jPanelDummyLayout.setHorizontalGroup(
            jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 954, Short.MAX_VALUE)
        );
        jPanelDummyLayout.setVerticalGroup(
            jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("tab1", jPanelDummy);

        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

        jPanelStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelStatus1.setText("Satus");

        javax.swing.GroupLayout jPanelStatusLayout = new javax.swing.GroupLayout(jPanelStatus);
        jPanelStatus.setLayout(jPanelStatusLayout);
        jPanelStatusLayout.setHorizontalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatusLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabelStatus1)
                .addContainerGap(837, Short.MAX_VALUE))
        );
        jPanelStatusLayout.setVerticalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelStatus1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelStatus, java.awt.BorderLayout.SOUTH);

        jMenuFile.setText("File");

        jMenuFileNew.setText("New");
        jMenuFileNew.setActionCommand("actionNewFile");
        jMenuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFileNew);

        jMenuFileOpen.setText("Open File");
        jMenuFileOpen.setActionCommand("actionOpenFile");
        jMenuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFileOpen);

        jMenuFileSave.setText("Save");
        jMenuFileSave.setActionCommand("actionSave");
        jMenuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFileSave);

        jMenuFileSaveAs.setText("Save As ...");
        jMenuFileSaveAs.setActionCommand("actionSaveAs");
        jMenuFileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileSaveAsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFileSaveAs);
        jMenuFile.add(jSeparator2);

        jMenuItemExportPEM.setText("Export as PEM");
        jMenuItemExportPEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExportPEMActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExportPEM);
        jMenuFile.add(jSeparator1);

        jMenuItemClose.setText("Close");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemClose);

        jMenuFileExit.setText("Exit");
        jMenuFileExit.setActionCommand("actionExit");
        jMenuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFileExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenuItemEditCopy.setText("Copy");
        jMenuItemEditCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditCopyActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditCopy);

        jMenuIEditPaste.setText("Paste");
        jMenuIEditPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuIEditPasteActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuIEditPaste);

        jMenuBar.add(jMenuEdit);

        jMenuView.setText("View");

        jMenuItemViewText.setText("View as Text");
        jMenuItemViewText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewTextActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemViewText);

        jMenuItemViewPEM.setText("View as PEM");
        jMenuItemViewPEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewPEMActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemViewPEM);

        jMenuBar.add(jMenuView);

        jMenuOptions.setText("Options");

        jRadioButtonMenuItemLoadPvtKey.setSelected(true);
        jRadioButtonMenuItemLoadPvtKey.setText("Load Private Key");
        jRadioButtonMenuItemLoadPvtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemLoadPvtKeyActionPerformed(evt);
            }
        });
        jMenuOptions.add(jRadioButtonMenuItemLoadPvtKey);

        jMenuBar.add(jMenuOptions);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void open() {
        CsrFileHandler cfh = new CsrFileHandler();
        if (cfh.openFileDialog("Open X.509 cerificfate or PKCS10 CSR") >= 0) {
            ImageIcon icon = null;
            jTabbedPane.remove(jPanelDummy);
            if (cfh.isCSRFile) {
                CSRPanel p = new CSRPanel(cfh);
                jTabbedPane.addTab("CSR " + cfh.getCSR().getCN(), icon, p, "CSR file");
                setVisible(true);
            } else {
                X509Panel p = new X509Panel(cfh);
                jTabbedPane.addTab("X.509 " + cfh.getCertificate().getCN(), icon, p, " file: " + cfh.filePath);
                setVisible(true);
            }
        }
    }

    private void save() {
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        tp.save();
    }

    private void saveAs() {
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        jTabbedPane.setTitleAt(idx, tp.fileHandler.filePath);
        tp.saveAs();
    }

    private CSRPanel newFile() {
        CsrFileHandler cfh = new CsrFileHandler();
        CSRPanel cp = new CSRPanel(cfh);
        ImageIcon icon = null;
        jTabbedPane.addTab("New CSR", icon, cp, "No File saved yet");
        return cp;
    }

    private void selfSign() {
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        if (tp instanceof CSRPanel) {
            tp.selfSign();
        }
    }

    private void showPEM() {
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        tp.showPEM();
    }

    private void viewAsText() {
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        tp.showAsText();
    }
    
    private void close(){
        int idx = jTabbedPane.getSelectedIndex();
        VCPanel tp = (VCPanel) jTabbedPane.getComponentAt(idx);
        tp.onClose();
        jTabbedPane.remove(idx);
    }
    
    private void doPaste() {
        //TODO: implement (whole pannel?)    
    }

    private void doCopy() {
        //TODO: implement  
    }


    private void jMenuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileOpenActionPerformed
        open();
    }//GEN-LAST:event_jMenuFileOpenActionPerformed

    private void jMenuFileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileSaveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_jMenuFileSaveAsActionPerformed

    private void jMenuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileExitActionPerformed
        doExit();
    }//GEN-LAST:event_jMenuFileExitActionPerformed

    private void jMenuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileNewActionPerformed
        newFile();
    }//GEN-LAST:event_jMenuFileNewActionPerformed

    private void jMenuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileSaveActionPerformed
        save();
    }//GEN-LAST:event_jMenuFileSaveActionPerformed

    private void jButtonTBNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTBNewActionPerformed
        newFile();
    }//GEN-LAST:event_jButtonTBNewActionPerformed

    private void jButtonTBOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTBOpenActionPerformed
        open();
    }//GEN-LAST:event_jButtonTBOpenActionPerformed

    private void jButtonTBSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTBSaveActionPerformed
        save();
    }//GEN-LAST:event_jButtonTBSaveActionPerformed

    private void jButtonSelfSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelfSignActionPerformed
        selfSign();
    }//GEN-LAST:event_jButtonSelfSignActionPerformed

    private void jButtonViewPEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewPEMActionPerformed
        showPEM();
    }//GEN-LAST:event_jButtonViewPEMActionPerformed

    private void jMenuIEditPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuIEditPasteActionPerformed
        doPaste();
    }//GEN-LAST:event_jMenuIEditPasteActionPerformed

    private void jMenuItemViewTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewTextActionPerformed
        viewAsText();
    }//GEN-LAST:event_jMenuItemViewTextActionPerformed

    private void jMenuItemEditCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditCopyActionPerformed
        doCopy();
    }//GEN-LAST:event_jMenuItemEditCopyActionPerformed

    private void jMenuItemViewPEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewPEMActionPerformed
        showPEM();
    }//GEN-LAST:event_jMenuItemViewPEMActionPerformed

    private void jMenuItemExportPEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExportPEMActionPerformed
        saveAs();
    }//GEN-LAST:event_jMenuItemExportPEMActionPerformed

    private void jRadioButtonMenuItemLoadPvtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemLoadPvtKeyActionPerformed
        javax.swing.JRadioButtonMenuItem src = (javax.swing.JRadioButtonMenuItem)evt.getSource();
        OptionsSingleton.getInstance().setLoadPrivateKey(src.isSelected());
    }//GEN-LAST:event_jRadioButtonMenuItemLoadPvtKeyActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
       close();
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Security.addProvider(new BouncyCastleProvider());
        Security.setProperty("crypto.policy", "unlimited");
        
        MainWindow mainWin = new MainWindow();
        mainWin.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(WindowEvent winEvt) {
                if(mainWin.onExit()==JOptionPane.OK_OPTION){
                    System.exit(0);
                }
            }
        });

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainWin.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelfSign;
    private javax.swing.JButton jButtonTBNew;
    private javax.swing.JButton jButtonTBOpen;
    private javax.swing.JButton jButtonTBSave;
    private javax.swing.JButton jButtonViewPEM;
    private javax.swing.JLabel jLabelStatus1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuFileExit;
    private javax.swing.JMenuItem jMenuFileNew;
    private javax.swing.JMenuItem jMenuFileOpen;
    private javax.swing.JMenuItem jMenuFileSave;
    private javax.swing.JMenuItem jMenuFileSaveAs;
    private javax.swing.JMenuItem jMenuIEditPaste;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemEditCopy;
    private javax.swing.JMenuItem jMenuItemExportPEM;
    private javax.swing.JMenuItem jMenuItemViewPEM;
    private javax.swing.JMenuItem jMenuItemViewText;
    private javax.swing.JMenu jMenuOptions;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanelDummy;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemLoadPvtKey;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables
}
